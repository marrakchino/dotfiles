#!/bin/bash

# alias vim to its python3 enabled version (required for ycm plugin)
alias vim=/opt/homebrew/bin/vim
export VISUAL=vim
export EDITOR=vim

# don't be distubed by Ctrl-S and Ctrl-Q in terminals (useful for Vi)
stty -ixon

# Source global definitions
[[ -f /etc/bashrc ]] && . /etc/bashrc
[[ -f ~/.bash_aliases.sh ]] && . ~/.bash_aliases.sh || [[ -f ~/.bash_aliases ]] && . ~/.bash_aliases
[[ -f /etc/.bash_completion ]] && . /etc/.bash_completion
[[ -f ~/.bash_functions ]] && . ~/.bash_functions
[[ -f ~/.bash_profile ]] && . ~/.bash_profile
[[ -f ~/.bash_prompt ]] && . ~/.bash_prompt

# Source bash completion files
[[ -f /etc/bash_completion.d/git-completion.bash ]] && . /etc/bash_completion.d/git-completion.bash
[[ -f ~/.git-completion.bash ]] && . ~/.git-completion.bash

export HISTIGNORE=ignoreboth:erasedups
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend
# check the window size after each command and, if necessary update the values of LINES and COLUMNS.
shopt -s checkwinsize

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [[ -n "$force_color_prompt" ]]; then
    if [[ -x /usr/bin/tput ]] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

export C=clang
export CXX=clang++
export RUST_BACKTRACE=full

# makefile completion:
complete -W "\`grep -oE '^[a-zA-Z0-9_.-]+:([^=]|$)' Makefile | sed 's/[^a-zA-Z0-9_.-]*$//'\`" make

export PATH="/usr/local/bin:$PATH"

source "$HOME/.cargo/env"

export DYLD_FRAMEWORK_PATH="$HOME/Library/Application\ Support/.doctolib-billing/fsv/lib"
export LLVM_HOME="$(brew --prefix llvm)"
export LLVM_PATH="$LLVM_HOME/bin"
export LLVM_CONFIG_PATH="$LLVM_PATH/llvm-config"
export LIBCLANG_PATH="$LLVM_HOME/lib"
export PATH="$LLVM_PATH:$LIBCLANG_PATH:$PATH"
export PATH="/opt/homebrew/bin:$PATH"
export PATH="/opt/homebrew/opt/openssl@1.1/bin:$PATH"

export JAVA_HOME="$(/usr/libexec/java_home)"
export ANDROID_HOME="/Users/neq/Library/Android/sdk"
export PATH="$PATH:$ANDROID_HOME/platform-tools"
export PATH="$PATH:$ANDROID_HOME/tools/bin"
export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin"
export NDK_HOME="$ANDROID_HOME/ndk/22.1.7171670"
export PATH="$PATH:$NDK_HOME/toolchains/llvm/prebuilt/darwin-x86_64/bin:$NDK_HOME/arm/bin"

# Doctolib: rbenv configuration
if command -v rbenv > /dev/null 2>&1; then
  eval "$(rbenv init -)";
fi

# Doctolib: nvm configuration
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Doctolib: ruby+openssl configuration
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"

export PATH="/opt/homebrew/opt/libpq/bin:$PATH"
